"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Mapator;

// Interfaces
// Helpers
function defaultKeyNotFoundHandler(value) {
  return undefined;
}

function defaultValueNotFoundHandler(key) {
  return undefined;
}

function findValue(hashMap, key) {
  return hashMap[key];
}

function findKey(hashMap, value) {
  return Object.keys(hashMap).find(function (key) {
    return hashMap[key] === value;
  });
} // Main


function Mapator(hashMap) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // @ts-ignore
  if (this instanceof Mapator) {
    throw new Error("Don't invoke Mapator with \"new\" keyword, use 'const mapper = Mapator({ ... })'.");
  }

  if (Object.keys(hashMap).length === 0 || hashMap === undefined) {
    throw new Error("Pass non-empty hashMap object as a first argument.");
  }

  var _options$onKeyNotFoun = options.onKeyNotFound,
      keyNotFound = _options$onKeyNotFoun === void 0 ? defaultKeyNotFoundHandler : _options$onKeyNotFoun,
      _options$onValueNotFo = options.onValueNotFound,
      valueNotFound = _options$onValueNotFo === void 0 ? defaultValueNotFoundHandler : _options$onValueNotFo;
  return {
    keyToValue: function keyToValue(key) {
      return findValue(hashMap, key) || valueNotFound(key);
    },
    valueToKey: function valueToKey(val) {
      return findKey(hashMap, val) || keyNotFound(val);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJkZWZhdWx0S2V5Tm90Rm91bmRIYW5kbGVyIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJkZWZhdWx0VmFsdWVOb3RGb3VuZEhhbmRsZXIiLCJrZXkiLCJmaW5kVmFsdWUiLCJoYXNoTWFwIiwiZmluZEtleSIsIk9iamVjdCIsImtleXMiLCJmaW5kIiwiTWFwYXRvciIsIm9wdGlvbnMiLCJFcnJvciIsImxlbmd0aCIsIm9uS2V5Tm90Rm91bmQiLCJrZXlOb3RGb3VuZCIsIm9uVmFsdWVOb3RGb3VuZCIsInZhbHVlTm90Rm91bmQiLCJrZXlUb1ZhbHVlIiwidmFsdWVUb0tleSIsInZhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBZ0JBO0FBRUEsU0FBU0EseUJBQVQsQ0FBbUNDLEtBQW5DLEVBQWtEO0FBQ2hELFNBQU9DLFNBQVA7QUFDRDs7QUFFRCxTQUFTQywyQkFBVCxDQUFxQ0MsR0FBckMsRUFBa0Q7QUFDaEQsU0FBT0YsU0FBUDtBQUNEOztBQUVELFNBQVNHLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTJDRixHQUEzQyxFQUE0RTtBQUMxRSxTQUFPRSxPQUFPLENBQUNGLEdBQUQsQ0FBZDtBQUNEOztBQUVELFNBQVNHLE9BQVQsQ0FBaUJELE9BQWpCLEVBQXlDTCxLQUF6QyxFQUE0RTtBQUMxRSxTQUFPTyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsT0FBWixFQUFxQkksSUFBckIsQ0FBMEIsVUFBQU4sR0FBRztBQUFBLFdBQUlFLE9BQU8sQ0FBQ0YsR0FBRCxDQUFQLEtBQWlCSCxLQUFyQjtBQUFBLEdBQTdCLENBQVA7QUFDRCxDLENBRUQ7OztBQUVlLFNBQVNVLE9BQVQsQ0FDYkwsT0FEYSxFQUdGO0FBQUEsTUFEWE0sT0FDVyx1RUFEUSxFQUNSOztBQUNYO0FBQ0EsTUFBSSxnQkFBZ0JELE9BQXBCLEVBQTZCO0FBQzNCLFVBQU0sSUFBSUUsS0FBSixxRkFBTjtBQUdEOztBQUVELE1BQUlMLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxPQUFaLEVBQXFCUSxNQUFyQixLQUFnQyxDQUFoQyxJQUFxQ1IsT0FBTyxLQUFLSixTQUFyRCxFQUFnRTtBQUM5RCxVQUFNLElBQUlXLEtBQUosQ0FBVSxvREFBVixDQUFOO0FBQ0Q7O0FBVlUsOEJBZVBELE9BZk8sQ0FhVEcsYUFiUztBQUFBLE1BYU1DLFdBYk4sc0NBYW9CaEIseUJBYnBCO0FBQUEsOEJBZVBZLE9BZk8sQ0FjVEssZUFkUztBQUFBLE1BY1FDLGFBZFIsc0NBY3dCZiwyQkFkeEI7QUFpQlgsU0FBTztBQUNMZ0IsSUFBQUEsVUFESyxzQkFDTWYsR0FETixFQUN3QjtBQUMzQixhQUFPQyxTQUFTLENBQUNDLE9BQUQsRUFBVUYsR0FBVixDQUFULElBQTJCYyxhQUFhLENBQUNkLEdBQUQsQ0FBL0M7QUFDRCxLQUhJO0FBSUxnQixJQUFBQSxVQUpLLHNCQUlNQyxHQUpOLEVBSXdCO0FBQzNCLGFBQU9kLE9BQU8sQ0FBQ0QsT0FBRCxFQUFVZSxHQUFWLENBQVAsSUFBeUJMLFdBQVcsQ0FBQ0ssR0FBRCxDQUEzQztBQUNEO0FBTkksR0FBUDtBQVFEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW50ZXJmYWNlc1xuXG5pbnRlcmZhY2UgU3RyaW5nSGFzaE1hcCB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIE9wdGlvbnMge1xuICBvbktleU5vdEZvdW5kPzogKGtleTogc3RyaW5nKSA9PiBhbnk7XG4gIG9uVmFsdWVOb3RGb3VuZD86ICh2YWx1ZTogc3RyaW5nKSA9PiBhbnk7XG59XG5cbmludGVyZmFjZSBQdWJsaWNBUEkge1xuICBrZXlUb1ZhbHVlOiAoa2V5OiBzdHJpbmcpID0+IGFueTtcbiAgdmFsdWVUb0tleTogKHZhbDogc3RyaW5nKSA9PiBhbnk7XG59XG5cbi8vIEhlbHBlcnNcblxuZnVuY3Rpb24gZGVmYXVsdEtleU5vdEZvdW5kSGFuZGxlcih2YWx1ZTogc3RyaW5nKSB7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRWYWx1ZU5vdEZvdW5kSGFuZGxlcihrZXk6IHN0cmluZykge1xuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kVmFsdWUoaGFzaE1hcDogU3RyaW5nSGFzaE1hcCwga2V5OiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gaGFzaE1hcFtrZXldO1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KGhhc2hNYXA6IFN0cmluZ0hhc2hNYXAsIHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gT2JqZWN0LmtleXMoaGFzaE1hcCkuZmluZChrZXkgPT4gaGFzaE1hcFtrZXldID09PSB2YWx1ZSk7XG59XG5cbi8vIE1haW5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWFwYXRvcihcbiAgaGFzaE1hcDogU3RyaW5nSGFzaE1hcCxcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9XG4pOiBQdWJsaWNBUEkge1xuICAvLyBAdHMtaWdub3JlXG4gIGlmICh0aGlzIGluc3RhbmNlb2YgTWFwYXRvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBEb24ndCBpbnZva2UgTWFwYXRvciB3aXRoIFwibmV3XCIga2V5d29yZCwgdXNlICdjb25zdCBtYXBwZXIgPSBNYXBhdG9yKHsgLi4uIH0pJy5gXG4gICAgKTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhoYXNoTWFwKS5sZW5ndGggPT09IDAgfHwgaGFzaE1hcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGFzcyBub24tZW1wdHkgaGFzaE1hcCBvYmplY3QgYXMgYSBmaXJzdCBhcmd1bWVudC5cIik7XG4gIH1cblxuICBjb25zdCB7XG4gICAgb25LZXlOb3RGb3VuZDoga2V5Tm90Rm91bmQgPSBkZWZhdWx0S2V5Tm90Rm91bmRIYW5kbGVyLFxuICAgIG9uVmFsdWVOb3RGb3VuZDogdmFsdWVOb3RGb3VuZCA9IGRlZmF1bHRWYWx1ZU5vdEZvdW5kSGFuZGxlclxuICB9ID0gb3B0aW9ucztcblxuICByZXR1cm4ge1xuICAgIGtleVRvVmFsdWUoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgICAgcmV0dXJuIGZpbmRWYWx1ZShoYXNoTWFwLCBrZXkpIHx8IHZhbHVlTm90Rm91bmQoa2V5KTtcbiAgICB9LFxuICAgIHZhbHVlVG9LZXkodmFsOiBzdHJpbmcpOiBhbnkge1xuICAgICAgcmV0dXJuIGZpbmRLZXkoaGFzaE1hcCwgdmFsKSB8fCBrZXlOb3RGb3VuZCh2YWwpO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==